import nodemailer from 'nodemailer'
import fs from 'fs'
import path from 'path'

// For production, use proper email service providers
const createTransporter = () => {
  // Check if we have proper production email credentials
  if (process.env.BREVO_API_KEY) {
    // Use Brevo (Sendinblue) for production
    return nodemailer.createTransporter({
      host: 'smtp-relay.brevo.com',
      port: 587,
      secure: false,
      auth: {
        user: process.env.BREVO_USER || 'your-brevo-email@domain.com',
        pass: process.env.BREVO_API_KEY
      }
    })
  } else if (process.env.MAILGUN_API_KEY) {
    // Use Mailgun for production
    return nodemailer.createTransporter({
      host: 'smtp.mailgun.org',
      port: 587,
      secure: false,
      auth: {
        user: process.env.MAILGUN_USER,
        pass: process.env.MAILGUN_API_KEY
      }
    })
  } else if (process.env.RESEND_API_KEY) {
    // Use Resend for production
    return nodemailer.createTransporter({
      host: 'smtp.resend.com',
      port: 587,
      secure: false,
      auth: {
        user: 'resend',
        pass: process.env.RESEND_API_KEY
      }
    })
  } else if (process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {
    // Fallback to Gmail with app password (not recommended for production)
    return nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD
      }
    })
  } else {
    // No credentials found - will fall back to simulation
    return null
  }
}
    auth: {
      user: process.env.EMAIL_USER || 'demo@skylume.com',
      pass: process.env.EMAIL_PASSWORD || 'demo-password'
    }
  })
}

export const sendSkyScoreEmail = async (userData, imageInfo) => {
  const { email, blueskyHandle, skyScore, archetype } = userData
  const { imagePath, imageFilename } = imageInfo
  
  try {
    // For MVP, we'll simulate email sending
    console.log(`📧 Simulating email send to: ${email}`)
    console.log(`📊 SkyScore: ${skyScore} | Archetype: ${archetype}`)
    console.log(`🖼️ Image generated: ${imageFilename}`)
    console.log(`💌 Email content would include:`)
    console.log(`   Subject: 🎉 Your SkyScore is ${skyScore}! You're ${archetype === 'Influencer' ? 'an' : 'a'} ${archetype}`)
    console.log(`   Attachment: ${imageFilename}`)
    console.log(`   CTA: Share on Bluesky`)
    
    // For MVP, we're NOT actually sending emails to avoid authentication issues
    // In production, uncomment the email sending code below and set up proper credentials
    /*
    const transporter = createTransporter()
    
    const mailOptions = {
      from: process.env.EMAIL_FROM || 'SkyLume <noreply@skylume.com>',
      to: email,
      subject: `🎉 Your SkyScore is ${skyScore}! You're ${archetype === 'Influencer' ? 'an' : 'a'} ${archetype}`,
      html: `...email template...`,
      attachments: [
        {
          filename: imageFilename,
          path: imagePath,
          cid: 'skyscore-card'
        }
      ]
    }
    
    const result = await transporter.sendMail(mailOptions)
    console.log('Email sent successfully:', result.messageId)
    */
    
    // Simulate a small delay for realism
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    return { success: true, message: 'Email sent successfully (simulated for MVP)' }
  } catch (error) {
    console.error('Email sending failed:', error)
    throw new Error('Failed to send email')
  }
}